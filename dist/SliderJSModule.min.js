class Slider{constructor(parentElement,imgsSrc){this.width=0;this.parentElement=parentElement;this.imgs=imgsSrc.map(({src,alt})=>this.makeElement('img',{src,alt}));this.points=null;this.init()}
makeElement(type,attrs){const el=document.createElement(type);for(let attr in attrs){el[attr]=attrs[attr]}
return el}
init(){this.makeElements();this.renderImgs(this.width);this.points=[...document.querySelectorAll('.slider-point .point')];this.setActivePoint(this.width);this.points.forEach(point=>point.addEventListener('click',e=>{this.handlePointClick(e)}))}
makeElements(){const{makeElement}=this;const slider=makeElement('div',{className:'slider'});const sliderBox=makeElement('div',{className:'slider-box'});const sliderImgs=makeElement('div',{className:'slider-imgs'});const panelLeft=makeElement('div',{className:'panel panel-left'});const leftArrow=makeElement('button',{className:'left-arrow'});leftArrow.innerHTML=`
      <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="306px" height="306px" viewBox="0 0 306 306" style="enable-background:new 0 0 306 306;" xml:space="preserve" > <g> <g id="chevron-left"> <polygon points="247.35,35.7 211.65,0 58.65,153 211.65,306 247.35,270.3 130.05,153 "/> </g> </g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> </svg>`;const panelRight=makeElement('div',{className:'panel panel-right'});const rightArrow=makeElement('button',{className:'right-arrow'});rightArrow.innerHTML=`
      <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="306px" height="306px" viewBox="0 0 306 306" style="enable-background:new 0 0 306 306;" xml:space="preserve" > <g> <g id="chevron-right"> <polygon points="94.35,0 58.65,35.7 175.95,153 58.65,270.3 94.35,306 247.35,153 "/> </g> </g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> <g></g> </svg>
        `;const sliderList=makeElement('ul',{className:'slider-list'});this.imgs.forEach((img,index)=>{const sliderPoint=makeElement('li',{className:'slider-point'});const span=makeElement('span',{className:'point'});span.setAttribute('data-index',index);sliderPoint.appendChild(span);sliderList.appendChild(sliderPoint)});leftArrow.addEventListener('click',()=>{this.handleLeft()});rightArrow.addEventListener('click',()=>{this.handleRight()});this.imgs.forEach(img=>{sliderImgs.appendChild(img)});sliderBox.appendChild(sliderImgs);panelLeft.appendChild(leftArrow);sliderBox.appendChild(panelLeft);panelRight.appendChild(rightArrow);sliderBox.appendChild(panelRight);slider.append(sliderBox);slider.appendChild(sliderList);this.parentElement.appendChild(slider)}
renderImgs(width){this.imgs.forEach((img,index)=>{img.style.transform=`translateX(${width + index * 100}%)`})}
handleRight(){this.width-=100;if(this.width<=-(this.imgs.length*100)){this.width=0}
this.renderImgs(this.width);this.setActivePoint(this.width)}
handleLeft(){this.width+=100;if(this.width>=100){this.width=0}
this.renderImgs(this.width);this.setActivePoint(this.width)}
setActivePoint(width){const index=Math.abs(width/100);this.points.forEach(point=>{point.classList.remove('active')});this.points[index].classList.add('active')}
handlePointClick(e){const index=-(e.target.getAttribute('data-index')*100);this.renderImgs(index);this.setActivePoint(index)}}
export default Slider